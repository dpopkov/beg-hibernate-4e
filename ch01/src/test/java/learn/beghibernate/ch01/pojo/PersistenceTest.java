package learn.beghibernate.ch01.pojo;

import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class PersistenceTest {

    private static final String DB_URL = "jdbc:h2:./db01";
    private static final String DB_USER = "sa";
    private static final String DB_PASSWORD = "";

    @BeforeClass
    public static void createTable() {
        try (Connection connection = getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement("DROP TABLE messages IF EXISTS")) {
                ps.execute();
            }
            try (PreparedStatement ps = connection.prepareStatement(
                    "CREATE TABLE messages (" +
                    "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                    "text VARCHAR(256)" +
                    ")")) {
                ps.execute();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test01SaveMessage() {
        try (Connection connection = getConnection()) {
            connection.setAutoCommit(false);
            try (PreparedStatement ps = connection.prepareStatement(
                    "INSERT INTO messages(text) VALUES(?)")) {
                ps.setString(1, "Hello, World");
                ps.execute();
            }
            connection.commit();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test02ReadMessage() {
        List<Message> list = new ArrayList<>();
        try (Connection connection = getConnection()) {
            try (PreparedStatement ps = connection.prepareStatement("SELECT id, text FROM messages")) {
                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        Message message = new Message();
                        message.setId(rs.getLong(1));
                        message.setText(rs.getString(2));
                        list.add(message);
                    }
                    assertEquals(1, list.size());
                    for (Message m : list) {
                        assertEquals("Hello, World", m.getText());
                        System.out.println(m.getText());
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }
}
